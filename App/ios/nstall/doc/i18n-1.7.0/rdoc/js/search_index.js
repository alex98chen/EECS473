var search_data = {"index":{"searchIndex":["gettext","poparser","i18n","argumenterror","backend","base","cache","cachefile","cascade","chain","implementation","fallbacks","flatten","gettext","podata","interpolationcompiler","compiler","keyvalue","implementation","subtreeproxy","memoize","metadata","pluralization","simple","implementation","transliterator","hashtransliterator","proctransliterator","base","config","disabled","exceptionhandler","gettext","helpers","hashrefinements","invalidlocale","invalidlocaledata","invalidpluralizationdata","json","locale","fallbacks","tag","parents","rfc4646","parser","simple","middleware","missinginterpolationargument","missingtranslation","base","missingtranslationdata","reservedinterpolationkey","tests","basics","defaults","interpolation","link","localization","date","datetime","procs","time","lookup","pluralization","procs","unknownfiletype","n_()","[]()","[]()","_()","_()","_deep_merge()","_fetch()","_reduce_none()","add()","add_default_approximations()","approximations()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales=()","available_locales_initialized?()","available_locales_initialized?()","backend()","backend=()","cache_key()","cache_key_digest()","cache_key_digest=()","cache_namespace()","cache_namespace=()","cache_store()","cache_store=()","call()","call()","capture()","compile_all_strings_in()","compile_if_an_interpolation()","compile_interpolation_token()","compiled_interpolation_body()","compute()","config()","config=()","decode()","deep_interpolate()","deep_merge!()","deep_symbolize_keys()","deep_symbolize_keys_in_object()","default()","default_locale()","default_locale=()","default_separator()","default_separator=()","defaults=()","digest_item()","direct_key()","eager_load!()","eager_load!()","eager_load!()","eager_load!()","eager_load!()","eager_loaded?()","encode()","enforce_available_locales()","enforce_available_locales!()","enforce_available_locales=()","escape_key_sym()","escape_plain_str()","euc_jp()","except()","except!()","exception_handler()","exception_handler=()","exists?()","exists?()","exists?()","exists?()","extract_non_symbol_default!()","extract_scope()","fallbacks()","fallbacks=()","fetch()","filter_args()","flatten_keys()","flatten_translations()","get()","gettext()","handle_exception()","handle_interpolation_token()","has_key?()","implementation()","implementation=()","included()","included()","init_translations()","init_translations()","init_translations()","initialized?()","initialized?()","initialized?()","inspect()","inspect_args()","instance_of?()","interpolate()","interpolate()","interpolate()","interpolate()","interpolate()","interpolate_hash()","interpolate_key()","interpolate_or_raise_missing()","interpolated_str?()","interpolation_patterns()","interpolation_patterns=()","is_a?()","keys()","kind_of?()","l()","links()","load_file()","load_file()","load_json()","load_path()","load_path=()","load_po()","load_rb()","load_translations()","load_yaml()","load_yml()","locale()","locale=()","locale_available?()","localize()","localize()","localize()","lookup()","lookup()","lookup()","lookup()","lookup()","map()","match()","memoized_lookup()","message()","missing_interpolation_argument_handler()","missing_interpolation_argument_handler=()","missing_key()","n_()","namespace_lookup?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","ngettext()","nil?()","nil_key()","normalize()","normalize_flat_keys()","normalize_flat_keys()","normalize_key()","normalize_keys()","normalize_pluralization()","normalized_path()","np_()","npgettext()","ns_()","nsgettext()","p_()","parent()","parents()","parse()","parser()","parser=()","perform_caching?()","pgettext()","plural_keys()","pluralization_key()","pluralize()","pluralize()","pluralize()","pluralize()","pluralizer()","pluralizers()","reload!()","reload!()","reload!()","reload!()","reload!()","reserved_key()","reset_memoizations!()","resolve()","resolve_link()","s_()","self_and_parents()","set_comment()","setup()","setup()","setup()","setup()","setup()","setup_date_translations()","setup_datetime_translations()","setup_time_proc_translations()","setup_time_translations()","sgettext()","store_link()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","subtags()","subtrees?()","subtrees?()","symbolize_key()","t()","t!()","tag()","tag()","tag()","teardown()","to_a()","to_a()","to_exception()","to_s()","to_s()","to_s()","to_sym()","to_sym()","tokenize()","translate()","translate()","translate()","translate()","translate()","translate()","translate!()","translate_localization_format()","translation_metadata()","translation_metadata=()","translations()","translations()","translations()","transliterate()","transliterate()","transliterate()","transliterate()","with_locale()","with_metadata()"],"longSearchIndex":["gettext","gettext::poparser","i18n","i18n::argumenterror","i18n::backend","i18n::backend::base","i18n::backend::cache","i18n::backend::cachefile","i18n::backend::cascade","i18n::backend::chain","i18n::backend::chain::implementation","i18n::backend::fallbacks","i18n::backend::flatten","i18n::backend::gettext","i18n::backend::gettext::podata","i18n::backend::interpolationcompiler","i18n::backend::interpolationcompiler::compiler","i18n::backend::keyvalue","i18n::backend::keyvalue::implementation","i18n::backend::keyvalue::subtreeproxy","i18n::backend::memoize","i18n::backend::metadata","i18n::backend::pluralization","i18n::backend::simple","i18n::backend::simple::implementation","i18n::backend::transliterator","i18n::backend::transliterator::hashtransliterator","i18n::backend::transliterator::proctransliterator","i18n::base","i18n::config","i18n::disabled","i18n::exceptionhandler","i18n::gettext","i18n::gettext::helpers","i18n::hashrefinements","i18n::invalidlocale","i18n::invalidlocaledata","i18n::invalidpluralizationdata","i18n::json","i18n::locale","i18n::locale::fallbacks","i18n::locale::tag","i18n::locale::tag::parents","i18n::locale::tag::rfc4646","i18n::locale::tag::rfc4646::parser","i18n::locale::tag::simple","i18n::middleware","i18n::missinginterpolationargument","i18n::missingtranslation","i18n::missingtranslation::base","i18n::missingtranslationdata","i18n::reservedinterpolationkey","i18n::tests","i18n::tests::basics","i18n::tests::defaults","i18n::tests::interpolation","i18n::tests::link","i18n::tests::localization","i18n::tests::localization::date","i18n::tests::localization::datetime","i18n::tests::localization::procs","i18n::tests::localization::time","i18n::tests::lookup","i18n::tests::pluralization","i18n::tests::procs","i18n::unknownfiletype","i18n::gettext::helpers#n_()","i18n::backend::keyvalue::subtreeproxy#[]()","i18n::locale::fallbacks#[]()","gettext::poparser#_()","i18n::gettext::helpers#_()","i18n::backend::chain::implementation#_deep_merge()","i18n::backend::cache#_fetch()","gettext::poparser#_reduce_none()","i18n::backend::transliterator::hashtransliterator#add()","i18n::backend::transliterator::hashtransliterator#add_default_approximations()","i18n::backend::transliterator::hashtransliterator#approximations()","i18n::backend::base#available_locales()","i18n::backend::chain::implementation#available_locales()","i18n::backend::keyvalue::implementation#available_locales()","i18n::backend::memoize#available_locales()","i18n::backend::simple::implementation#available_locales()","i18n::config#available_locales()","i18n::config#available_locales=()","i18n::base#available_locales_initialized?()","i18n::config#available_locales_initialized?()","i18n::config#backend()","i18n::config#backend=()","i18n::backend::cache#cache_key()","i18n::cache_key_digest()","i18n::cache_key_digest=()","i18n::cache_namespace()","i18n::cache_namespace=()","i18n::cache_store()","i18n::cache_store=()","i18n::exceptionhandler#call()","i18n::middleware#call()","i18n::tests::interpolation#capture()","i18n::backend::interpolationcompiler#compile_all_strings_in()","i18n::backend::interpolationcompiler::compiler#compile_if_an_interpolation()","i18n::backend::interpolationcompiler::compiler#compile_interpolation_token()","i18n::backend::interpolationcompiler::compiler#compiled_interpolation_body()","i18n::locale::fallbacks#compute()","i18n::base#config()","i18n::base#config=()","i18n::json::decode()","i18n::backend::base#deep_interpolate()","i18n::hashrefinements#deep_merge!()","i18n::hashrefinements#deep_symbolize_keys()","i18n::hashrefinements#deep_symbolize_keys_in_object()","i18n::backend::base#default()","i18n::config#default_locale()","i18n::config#default_locale=()","i18n::config#default_separator()","i18n::config#default_separator=()","i18n::locale::fallbacks#defaults=()","i18n::backend::cache#digest_item()","i18n::backend::interpolationcompiler::compiler#direct_key()","i18n::backend::base#eager_load!()","i18n::backend::chain::implementation#eager_load!()","i18n::backend::memoize#eager_load!()","i18n::backend::simple::implementation#eager_load!()","i18n::base#eager_load!()","i18n::backend::base#eager_loaded?()","i18n::json::encode()","i18n::config#enforce_available_locales()","i18n::base#enforce_available_locales!()","i18n::config#enforce_available_locales=()","i18n::backend::interpolationcompiler::compiler#escape_key_sym()","i18n::backend::interpolationcompiler::compiler#escape_plain_str()","i18n::tests::interpolation#euc_jp()","i18n::hashrefinements#except()","i18n::hashrefinements#except!()","i18n::config#exception_handler()","i18n::config#exception_handler=()","i18n::backend::base#exists?()","i18n::backend::chain::implementation#exists?()","i18n::backend::fallbacks#exists?()","i18n::base#exists?()","i18n::backend::fallbacks#extract_non_symbol_default!()","i18n::gettext::extract_scope()","i18n::fallbacks()","i18n::fallbacks=()","i18n::backend::cache#fetch()","i18n::tests::procs::filter_args()","i18n::backend::flatten#flatten_keys()","i18n::backend::flatten#flatten_translations()","i18n::backend::transliterator::get()","i18n::gettext::helpers#gettext()","i18n::base#handle_exception()","i18n::backend::interpolationcompiler::compiler#handle_interpolation_token()","i18n::backend::keyvalue::subtreeproxy#has_key?()","i18n::locale::tag::implementation()","i18n::locale::tag::implementation=()","i18n::backend::metadata::included()","i18n::tests::localization::included()","i18n::backend::chain::implementation#init_translations()","i18n::backend::keyvalue::implementation#init_translations()","i18n::backend::simple::implementation#init_translations()","i18n::backend::chain::implementation#initialized?()","i18n::backend::keyvalue::implementation#initialized?()","i18n::backend::simple::implementation#initialized?()","i18n::backend::keyvalue::subtreeproxy#inspect()","i18n::tests::localization::procs::inspect_args()","i18n::backend::keyvalue::subtreeproxy#instance_of?()","i18n::interpolate()","i18n::backend::base#interpolate()","i18n::backend::interpolationcompiler#interpolate()","i18n::backend::metadata#interpolate()","i18n::tests::interpolation#interpolate()","i18n::interpolate_hash()","i18n::backend::interpolationcompiler::compiler#interpolate_key()","i18n::backend::interpolationcompiler::compiler#interpolate_or_raise_missing()","i18n::backend::interpolationcompiler::compiler#interpolated_str?()","i18n::config#interpolation_patterns()","i18n::config#interpolation_patterns=()","i18n::backend::keyvalue::subtreeproxy#is_a?()","i18n::missingtranslation::base#keys()","i18n::backend::keyvalue::subtreeproxy#kind_of?()","i18n::base#l()","i18n::backend::flatten#links()","i18n::backend::base#load_file()","i18n::backend::cachefile#load_file()","i18n::backend::base#load_json()","i18n::config#load_path()","i18n::config#load_path=()","i18n::backend::gettext#load_po()","i18n::backend::base#load_rb()","i18n::backend::base#load_translations()","i18n::backend::base#load_yaml()","i18n::backend::base#load_yml()","i18n::config#locale()","i18n::config#locale=()","i18n::base#locale_available?()","i18n::backend::base#localize()","i18n::backend::chain::implementation#localize()","i18n::base#localize()","i18n::backend::base#lookup()","i18n::backend::cascade#lookup()","i18n::backend::keyvalue::implementation#lookup()","i18n::backend::memoize#lookup()","i18n::backend::simple::implementation#lookup()","i18n::locale::fallbacks#map()","i18n::locale::tag::rfc4646::parser::match()","i18n::backend::memoize#memoized_lookup()","i18n::missingtranslation::base#message()","i18n::config#missing_interpolation_argument_handler()","i18n::config#missing_interpolation_argument_handler=()","i18n::backend::interpolationcompiler::compiler#missing_key()","i18n::gettext::helpers#n_()","i18n::backend::chain::implementation#namespace_lookup?()","i18n::backend::chain::implementation::new()","i18n::backend::keyvalue::implementation::new()","i18n::backend::keyvalue::subtreeproxy::new()","i18n::backend::transliterator::hashtransliterator::new()","i18n::backend::transliterator::proctransliterator::new()","i18n::disabled::new()","i18n::invalidlocale::new()","i18n::invalidlocaledata::new()","i18n::invalidpluralizationdata::new()","i18n::locale::fallbacks::new()","i18n::locale::tag::simple::new()","i18n::middleware::new()","i18n::missinginterpolationargument::new()","i18n::missingtranslation::base::new()","i18n::reservedinterpolationkey::new()","i18n::unknownfiletype::new()","i18n::gettext::helpers#ngettext()","i18n::backend::keyvalue::subtreeproxy#nil?()","i18n::backend::interpolationcompiler::compiler#nil_key()","i18n::backend::gettext#normalize()","i18n::backend::flatten#normalize_flat_keys()","i18n::backend::flatten::normalize_flat_keys()","i18n::base#normalize_key()","i18n::base#normalize_keys()","i18n::backend::gettext#normalize_pluralization()","i18n::backend::cachefile#normalized_path()","i18n::gettext::helpers#np_()","i18n::gettext::helpers#npgettext()","i18n::gettext::helpers#ns_()","i18n::gettext::helpers#nsgettext()","i18n::gettext::helpers#p_()","i18n::locale::tag::parents#parent()","i18n::locale::tag::parents#parents()","i18n::backend::gettext#parse()","i18n::locale::tag::rfc4646::parser()","i18n::locale::tag::rfc4646::parser=()","i18n::perform_caching?()","i18n::gettext::helpers#pgettext()","i18n::gettext::plural_keys()","i18n::backend::base#pluralization_key()","i18n::backend::base#pluralize()","i18n::backend::keyvalue::implementation#pluralize()","i18n::backend::metadata#pluralize()","i18n::backend::pluralization#pluralize()","i18n::backend::pluralization#pluralizer()","i18n::backend::pluralization#pluralizers()","i18n::backend::base#reload!()","i18n::backend::chain::implementation#reload!()","i18n::backend::memoize#reload!()","i18n::backend::simple::implementation#reload!()","i18n::base#reload!()","i18n::backend::interpolationcompiler::compiler#reserved_key()","i18n::backend::memoize#reset_memoizations!()","i18n::backend::base#resolve()","i18n::backend::flatten#resolve_link()","i18n::gettext::helpers#s_()","i18n::locale::tag::parents#self_and_parents()","i18n::backend::gettext::podata#set_comment()","i18n::tests::defaults#setup()","i18n::tests::localization::date#setup()","i18n::tests::localization::datetime#setup()","i18n::tests::localization::time#setup()","i18n::tests::lookup#setup()","i18n::tests::localization::date#setup_date_translations()","i18n::tests::localization::datetime#setup_datetime_translations()","i18n::tests::localization::procs#setup_time_proc_translations()","i18n::tests::localization::time#setup_time_translations()","i18n::gettext::helpers#sgettext()","i18n::backend::flatten#store_link()","i18n::backend::base#store_translations()","i18n::backend::chain::implementation#store_translations()","i18n::backend::interpolationcompiler#store_translations()","i18n::backend::keyvalue::implementation#store_translations()","i18n::backend::memoize#store_translations()","i18n::backend::simple::implementation#store_translations()","i18n::locale::tag::simple#subtags()","i18n::backend::base#subtrees?()","i18n::backend::keyvalue::implementation#subtrees?()","i18n::hashrefinements#symbolize_key()","i18n::base#t()","i18n::base#t!()","i18n::locale::tag::tag()","i18n::locale::tag::rfc4646::tag()","i18n::locale::tag::simple::tag()","i18n::tests::basics#teardown()","i18n::locale::tag::rfc4646#to_a()","i18n::locale::tag::simple#to_a()","i18n::missingtranslation::base#to_exception()","i18n::locale::tag::rfc4646#to_s()","i18n::locale::tag::simple#to_s()","i18n::missingtranslation::base#to_s()","i18n::locale::tag::rfc4646#to_sym()","i18n::locale::tag::simple#to_sym()","i18n::backend::interpolationcompiler::compiler#tokenize()","i18n::backend::base#translate()","i18n::backend::cache#translate()","i18n::backend::chain::implementation#translate()","i18n::backend::fallbacks#translate()","i18n::backend::metadata#translate()","i18n::base#translate()","i18n::base#translate!()","i18n::backend::base#translate_localization_format()","i18n::backend::metadata::translation_metadata()","i18n::backend::metadata::translation_metadata=()","i18n::backend::chain::implementation#translations()","i18n::backend::keyvalue::implementation#translations()","i18n::backend::simple::implementation#translations()","i18n::backend::transliterator#transliterate()","i18n::backend::transliterator::hashtransliterator#transliterate()","i18n::backend::transliterator::proctransliterator#transliterate()","i18n::base#transliterate()","i18n::base#with_locale()","i18n::backend::metadata#with_metadata()"],"info":[["GetText","","GetText.html","",""],["GetText::PoParser","","GetText/PoParser.html","",""],["I18n","","I18n.html","","<p>This module allows you to easily cache all responses from the backend - thus speeding up the I18n aspects …\n"],["I18n::ArgumentError","","I18n/ArgumentError.html","",""],["I18n::Backend","","I18n/Backend.html","",""],["I18n::Backend::Base","","I18n/Backend/Base.html","",""],["I18n::Backend::Cache","","I18n/Backend/Cache.html","","<p>TODO Should the cache be cleared if new translations are stored?\n"],["I18n::Backend::CacheFile","","I18n/Backend/CacheFile.html","","<p>Overwrites the Base load_file method to cache loaded file contents.\n"],["I18n::Backend::Cascade","","I18n/Backend/Cascade.html","",""],["I18n::Backend::Chain","","I18n/Backend/Chain.html","","<p>Backend that chains multiple other backends and checks each of them when a translation needs to be looked …\n"],["I18n::Backend::Chain::Implementation","","I18n/Backend/Chain/Implementation.html","",""],["I18n::Backend::Fallbacks","","I18n/Backend/Fallbacks.html","",""],["I18n::Backend::Flatten","","I18n/Backend/Flatten.html","","<p>This module contains several helpers to assist flattening translations. You may want to flatten translations …\n"],["I18n::Backend::Gettext","","I18n/Backend/Gettext.html","","<p>Experimental support for using Gettext po files to store translations.\n<p>To use this you can simply include …\n"],["I18n::Backend::Gettext::PoData","","I18n/Backend/Gettext/PoData.html","",""],["I18n::Backend::InterpolationCompiler","","I18n/Backend/InterpolationCompiler.html","",""],["I18n::Backend::InterpolationCompiler::Compiler","","I18n/Backend/InterpolationCompiler/Compiler.html","",""],["I18n::Backend::KeyValue","","I18n/Backend/KeyValue.html","","<p>This is a basic backend for key value stores. It receives on initialization the store, which should respond …\n"],["I18n::Backend::KeyValue::Implementation","","I18n/Backend/KeyValue/Implementation.html","",""],["I18n::Backend::KeyValue::SubtreeProxy","","I18n/Backend/KeyValue/SubtreeProxy.html","",""],["I18n::Backend::Memoize","","I18n/Backend/Memoize.html","",""],["I18n::Backend::Metadata","","I18n/Backend/Metadata.html","",""],["I18n::Backend::Pluralization","","I18n/Backend/Pluralization.html","",""],["I18n::Backend::Simple","","I18n/Backend/Simple.html","","<p>A simple backend that reads translations from YAML files and stores them in an in-memory hash. Relies …\n"],["I18n::Backend::Simple::Implementation","","I18n/Backend/Simple/Implementation.html","",""],["I18n::Backend::Transliterator","","I18n/Backend/Transliterator.html","",""],["I18n::Backend::Transliterator::HashTransliterator","","I18n/Backend/Transliterator/HashTransliterator.html","","<p>A transliterator which accepts a Hash of characters as its translation rule.\n"],["I18n::Backend::Transliterator::ProcTransliterator","","I18n/Backend/Transliterator/ProcTransliterator.html","","<p>A transliterator which accepts a Proc as its transliteration rule.\n"],["I18n::Base","","I18n/Base.html","",""],["I18n::Config","","I18n/Config.html","",""],["I18n::Disabled","","I18n/Disabled.html","",""],["I18n::ExceptionHandler","","I18n/ExceptionHandler.html","",""],["I18n::Gettext","","I18n/Gettext.html","",""],["I18n::Gettext::Helpers","","I18n/Gettext/Helpers.html","","<p>Implements classical Gettext style accessors. To use this include the module to the global namespace …\n"],["I18n::HashRefinements","","I18n/HashRefinements.html","",""],["I18n::InvalidLocale","","I18n/InvalidLocale.html","",""],["I18n::InvalidLocaleData","","I18n/InvalidLocaleData.html","",""],["I18n::InvalidPluralizationData","","I18n/InvalidPluralizationData.html","",""],["I18n::JSON","","I18n/JSON.html","",""],["I18n::Locale","","I18n/Locale.html","",""],["I18n::Locale::Fallbacks","","I18n/Locale/Fallbacks.html","",""],["I18n::Locale::Tag","","I18n/Locale/Tag.html","",""],["I18n::Locale::Tag::Parents","","I18n/Locale/Tag/Parents.html","",""],["I18n::Locale::Tag::Rfc4646","","I18n/Locale/Tag/Rfc4646.html","",""],["I18n::Locale::Tag::Rfc4646::Parser","","I18n/Locale/Tag/Rfc4646/Parser.html","",""],["I18n::Locale::Tag::Simple","","I18n/Locale/Tag/Simple.html","",""],["I18n::Middleware","","I18n/Middleware.html","",""],["I18n::MissingInterpolationArgument","","I18n/MissingInterpolationArgument.html","",""],["I18n::MissingTranslation","","I18n/MissingTranslation.html","",""],["I18n::MissingTranslation::Base","","I18n/MissingTranslation/Base.html","",""],["I18n::MissingTranslationData","","I18n/MissingTranslationData.html","",""],["I18n::ReservedInterpolationKey","","I18n/ReservedInterpolationKey.html","",""],["I18n::Tests","","I18n/Tests.html","",""],["I18n::Tests::Basics","","I18n/Tests/Basics.html","",""],["I18n::Tests::Defaults","","I18n/Tests/Defaults.html","",""],["I18n::Tests::Interpolation","","I18n/Tests/Interpolation.html","",""],["I18n::Tests::Link","","I18n/Tests/Link.html","",""],["I18n::Tests::Localization","","I18n/Tests/Localization.html","",""],["I18n::Tests::Localization::Date","","I18n/Tests/Localization/Date.html","",""],["I18n::Tests::Localization::DateTime","","I18n/Tests/Localization/DateTime.html","",""],["I18n::Tests::Localization::Procs","","I18n/Tests/Localization/Procs.html","",""],["I18n::Tests::Localization::Time","","I18n/Tests/Localization/Time.html","",""],["I18n::Tests::Lookup","","I18n/Tests/Lookup.html","",""],["I18n::Tests::Pluralization","","I18n/Tests/Pluralization.html","",""],["I18n::Tests::Procs","","I18n/Tests/Procs.html","",""],["I18n::UnknownFileType","","I18n/UnknownFileType.html","",""],["N_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-N_","(msgsid)","<p>Makes dynamic translation messages readable for the gettext parser. <code>_(fruit)</code> cannot be understood by …\n"],["[]","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-5B-5D","(key)",""],["[]","I18n::Locale::Fallbacks","I18n/Locale/Fallbacks.html#method-i-5B-5D","(locale)",""],["_","GetText::PoParser","GetText/PoParser.html#method-i-_","(x)",""],["_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-_","(msgid, options = EMPTY_HASH)",""],["_deep_merge","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-_deep_merge","(hash, other_hash)","<p>This is approximately what gets used in ActiveSupport. However since we are not guaranteed to run in …\n"],["_fetch","I18n::Backend::Cache","I18n/Backend/Cache.html#method-i-_fetch","(cache_key, &block)",""],["_reduce_none","GetText::PoParser","GetText/PoParser.html#method-i-_reduce_none","( val, _values, result )",""],["add","I18n::Backend::Transliterator::HashTransliterator","I18n/Backend/Transliterator/HashTransliterator.html#method-i-add","(hash)","<p>Add transliteration rules to the approximations hash.\n"],["add_default_approximations","I18n::Backend::Transliterator::HashTransliterator","I18n/Backend/Transliterator/HashTransliterator.html#method-i-add_default_approximations","()",""],["approximations","I18n::Backend::Transliterator::HashTransliterator","I18n/Backend/Transliterator/HashTransliterator.html#method-i-approximations","()",""],["available_locales","I18n::Backend::Base","I18n/Backend/Base.html#method-i-available_locales","()","<p>Returns an array of locales for which translations are available ignoring the reserved translation meta …\n"],["available_locales","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-available_locales","()",""],["available_locales","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-available_locales","()","<p>Get available locales from the translations hash\n"],["available_locales","I18n::Config","I18n/Config.html#method-i-available_locales","()","<p>Returns an array of locales for which translations are available. Unless you explicitely set these through …\n"],["available_locales=","I18n::Config","I18n/Config.html#method-i-available_locales-3D","(locales)","<p>Sets the available locales.\n"],["available_locales_initialized?","I18n::Base","I18n/Base.html#method-i-available_locales_initialized-3F","()",""],["available_locales_initialized?","I18n::Config","I18n/Config.html#method-i-available_locales_initialized-3F","()","<p>Returns true if the available_locales have been initialized\n"],["backend","I18n::Config","I18n/Config.html#method-i-backend","()","<p>Returns the current backend. Defaults to <code>Backend::Simple</code>.\n"],["backend=","I18n::Config","I18n/Config.html#method-i-backend-3D","(backend)","<p>Sets the current backend. Used to set a custom backend.\n"],["cache_key","I18n::Backend::Cache","I18n/Backend/Cache.html#method-i-cache_key","(locale, key, options)",""],["cache_key_digest","I18n","I18n.html#method-c-cache_key_digest","()",""],["cache_key_digest=","I18n","I18n.html#method-c-cache_key_digest-3D","(key_digest)",""],["cache_namespace","I18n","I18n.html#method-c-cache_namespace","()",""],["cache_namespace=","I18n","I18n.html#method-c-cache_namespace-3D","(namespace)",""],["cache_store","I18n","I18n.html#method-c-cache_store","()",""],["cache_store=","I18n","I18n.html#method-c-cache_store-3D","(store)",""],["call","I18n::ExceptionHandler","I18n/ExceptionHandler.html#method-i-call","(exception, _locale, _key, _options)",""],["call","I18n::Middleware","I18n/Middleware.html#method-i-call","(env)",""],["capture","I18n::Tests::Interpolation","I18n/Tests/Interpolation.html#method-i-capture","(stream)",""],["compile_all_strings_in","I18n::Backend::InterpolationCompiler","I18n/Backend/InterpolationCompiler.html#method-i-compile_all_strings_in","(data)",""],["compile_if_an_interpolation","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-compile_if_an_interpolation","(string)",""],["compile_interpolation_token","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-compile_interpolation_token","(key)",""],["compiled_interpolation_body","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-compiled_interpolation_body","(str)",""],["compute","I18n::Locale::Fallbacks","I18n/Locale/Fallbacks.html#method-i-compute","(tags, include_defaults = true, exclude = [])",""],["config","I18n::Base","I18n/Base.html#method-i-config","()","<p>Gets I18n configuration object.\n"],["config=","I18n::Base","I18n/Base.html#method-i-config-3D","(value)","<p>Sets I18n configuration object.\n"],["decode","I18n::JSON","I18n/JSON.html#method-c-decode","(value)",""],["deep_interpolate","I18n::Backend::Base","I18n/Backend/Base.html#method-i-deep_interpolate","(locale, data, values = EMPTY_HASH)","<p>Deep interpolation\n\n<pre>deep_interpolate { people: { ann: &quot;Ann is %{ann}&quot;, john: &quot;John is %{john}&quot; } },\n   ...</pre>\n"],["deep_merge!","I18n::HashRefinements","I18n/HashRefinements.html#method-i-deep_merge-21","(data)","<p>deep_merge_hash! by Stefan Rusterholz, see www.ruby-forum.com/topic/142809\n"],["deep_symbolize_keys","I18n::HashRefinements","I18n/HashRefinements.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys_in_object","I18n::HashRefinements","I18n/HashRefinements.html#method-i-deep_symbolize_keys_in_object","(value)",""],["default","I18n::Backend::Base","I18n/Backend/Base.html#method-i-default","(locale, object, subject, options = EMPTY_HASH)","<p>Evaluates defaults. If given subject is an Array, it walks the array and returns the first translation …\n"],["default_locale","I18n::Config","I18n/Config.html#method-i-default_locale","()","<p>Returns the current default locale. Defaults to :&#39;en&#39;\n"],["default_locale=","I18n::Config","I18n/Config.html#method-i-default_locale-3D","(locale)","<p>Sets the current default locale. Used to set a custom default locale.\n"],["default_separator","I18n::Config","I18n/Config.html#method-i-default_separator","()","<p>Returns the current default scope separator. Defaults to &#39;.&#39;\n"],["default_separator=","I18n::Config","I18n/Config.html#method-i-default_separator-3D","(separator)","<p>Sets the current default scope separator.\n"],["defaults=","I18n::Locale::Fallbacks","I18n/Locale/Fallbacks.html#method-i-defaults-3D","(defaults)",""],["digest_item","I18n::Backend::Cache","I18n/Backend/Cache.html#method-i-digest_item","(key)",""],["direct_key","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-direct_key","(key)",""],["eager_load!","I18n::Backend::Base","I18n/Backend/Base.html#method-i-eager_load-21","()",""],["eager_load!","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-eager_load-21","()",""],["eager_load!","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-eager_load-21","()",""],["eager_load!","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-eager_load-21","()",""],["eager_load!","I18n::Base","I18n/Base.html#method-i-eager_load-21","()","<p>Tells the backend to load translations now. Used in situations like the Rails production environment. …\n"],["eager_loaded?","I18n::Backend::Base","I18n/Backend/Base.html#method-i-eager_loaded-3F","()",""],["encode","I18n::JSON","I18n/JSON.html#method-c-encode","(value)",""],["enforce_available_locales","I18n::Config","I18n/Config.html#method-i-enforce_available_locales","()",""],["enforce_available_locales!","I18n::Base","I18n/Base.html#method-i-enforce_available_locales-21","(locale)","<p>Raises an InvalidLocale exception when the passed locale is not available.\n"],["enforce_available_locales=","I18n::Config","I18n/Config.html#method-i-enforce_available_locales-3D","(enforce_available_locales)",""],["escape_key_sym","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-escape_key_sym","(key)",""],["escape_plain_str","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-escape_plain_str","(str)",""],["euc_jp","I18n::Tests::Interpolation","I18n/Tests/Interpolation.html#method-i-euc_jp","(string)",""],["except","I18n::HashRefinements","I18n/HashRefinements.html#method-i-except","(*keys)",""],["except!","I18n::HashRefinements","I18n/HashRefinements.html#method-i-except-21","(*keys)",""],["exception_handler","I18n::Config","I18n/Config.html#method-i-exception_handler","()","<p>Returns the current exception handler. Defaults to an instance of I18n::ExceptionHandler.\n"],["exception_handler=","I18n::Config","I18n/Config.html#method-i-exception_handler-3D","(exception_handler)","<p>Sets the exception handler.\n"],["exists?","I18n::Backend::Base","I18n/Backend/Base.html#method-i-exists-3F","(locale, key)",""],["exists?","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-exists-3F","(locale, key)",""],["exists?","I18n::Backend::Fallbacks","I18n/Backend/Fallbacks.html#method-i-exists-3F","(locale, key)",""],["exists?","I18n::Base","I18n/Base.html#method-i-exists-3F","(key, _locale = nil, locale: _locale)","<p>Returns true if a translation exists for a given key, otherwise returns false.\n"],["extract_non_symbol_default!","I18n::Backend::Fallbacks","I18n/Backend/Fallbacks.html#method-i-extract_non_symbol_default-21","(options)",""],["extract_scope","I18n::Gettext","I18n/Gettext.html#method-c-extract_scope","(msgid, separator)",""],["fallbacks","I18n","I18n.html#method-c-fallbacks","()","<p>Returns the current fallbacks implementation. Defaults to <code>I18n::Locale::Fallbacks</code>.\n"],["fallbacks=","I18n","I18n.html#method-c-fallbacks-3D","(fallbacks)","<p>Sets the current fallbacks implementation. Use this to set a different fallbacks implementation.\n"],["fetch","I18n::Backend::Cache","I18n/Backend/Cache.html#method-i-fetch","(cache_key, &block)",""],["filter_args","I18n::Tests::Procs","I18n/Tests/Procs.html#method-c-filter_args","(*args)",""],["flatten_keys","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-i-flatten_keys","(hash, escape, prev_key=nil, &block)","<p>Flatten keys for nested Hashes by chaining up keys:\n\n<pre>&gt;&gt; { &quot;a&quot; =&gt; { &quot;b&quot; =&gt; { &quot;c&quot; =&gt; &quot;d&quot;, &quot;e&quot; =&gt; &quot;f&quot; }, &quot;g&quot; ...</pre>\n"],["flatten_translations","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-i-flatten_translations","(locale, data, escape, subtree)","<p>Receives a hash of translations (where the key is a locale and the value is another hash) and return …\n"],["get","I18n::Backend::Transliterator","I18n/Backend/Transliterator.html#method-c-get","(rule = nil)","<p>Get a transliterator instance.\n"],["gettext","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-gettext","(msgid, options = EMPTY_HASH)",""],["handle_exception","I18n::Base","I18n/Base.html#method-i-handle_exception","(handling, exception, locale, key, options)","<p>Any exceptions thrown in translate will be sent to the @@exception_handler which can be a Symbol, a  …\n"],["handle_interpolation_token","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-handle_interpolation_token","(interpolation, matchdata)",""],["has_key?","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-has_key-3F","(key)",""],["implementation","I18n::Locale::Tag","I18n/Locale/Tag.html#method-c-implementation","()","<p>Returns the current locale tag implementation. Defaults to <code>I18n::Locale::Tag::Simple</code>.\n"],["implementation=","I18n::Locale::Tag","I18n/Locale/Tag.html#method-c-implementation-3D","(implementation)","<p>Sets the current locale tag implementation. Use this to set a different locale tag implementation.\n"],["included","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-c-included","(base)",""],["included","I18n::Tests::Localization","I18n/Tests/Localization.html#method-c-included","(base)",""],["init_translations","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-init_translations","()",""],["init_translations","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-init_translations","()",""],["init_translations","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-init_translations","()",""],["initialized?","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-initialized-3F","()",""],["initialized?","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-initialized-3F","()",""],["initialized?","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-initialized-3F","()",""],["inspect","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-inspect","()",""],["inspect_args","I18n::Tests::Localization::Procs","I18n/Tests/Localization/Procs.html#method-c-inspect_args","(args)",""],["instance_of?","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-instance_of-3F","(klass)",""],["interpolate","I18n","I18n.html#method-c-interpolate","(string, values)","<p>Return String or raises MissingInterpolationArgument exception. Missing argument&#39;s logic is handled …\n"],["interpolate","I18n::Backend::Base","I18n/Backend/Base.html#method-i-interpolate","(locale, subject, values = EMPTY_HASH)","<p>Interpolates values into a given subject.\n\n<pre>if the given subject is a string then:\nmethod interpolates &quot;file ...</pre>\n"],["interpolate","I18n::Backend::InterpolationCompiler","I18n/Backend/InterpolationCompiler.html#method-i-interpolate","(locale, string, values)",""],["interpolate","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-i-interpolate","(locale, entry, values = EMPTY_HASH)",""],["interpolate","I18n::Tests::Interpolation","I18n/Tests/Interpolation.html#method-i-interpolate","(*args)",""],["interpolate_hash","I18n","I18n.html#method-c-interpolate_hash","(string, values)",""],["interpolate_key","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-interpolate_key","(key)",""],["interpolate_or_raise_missing","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-interpolate_or_raise_missing","(key)",""],["interpolated_str?","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-interpolated_str-3F","(str)",""],["interpolation_patterns","I18n::Config","I18n/Config.html#method-i-interpolation_patterns","()","<p>Returns the current interpolation patterns. Defaults to I18n::DEFAULT_INTERPOLATION_PATTERNS.\n"],["interpolation_patterns=","I18n::Config","I18n/Config.html#method-i-interpolation_patterns-3D","(interpolation_patterns)","<p>Sets the current interpolation patterns. Used to set a interpolation patterns.\n<p>E.g. using {{}} as a placeholder …\n"],["is_a?","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-is_a-3F","(klass)",""],["keys","I18n::MissingTranslation::Base","I18n/MissingTranslation/Base.html#method-i-keys","()",""],["kind_of?","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-kind_of-3F","(klass)",""],["l","I18n::Base","I18n/Base.html#method-i-l","(object, locale: nil, format: nil, **options)",""],["links","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-i-links","()","<p>Store flattened links.\n"],["load_file","I18n::Backend::Base","I18n/Backend/Base.html#method-i-load_file","(filename)","<p>Loads a single translations file by delegating to #load_rb or #load_yml depending on the file extension …\n"],["load_file","I18n::Backend::CacheFile","I18n/Backend/CacheFile.html#method-i-load_file","(filename)","<p>Track loaded translation files in the `i18n.load_file` scope, and skip loading the file if its contents …\n"],["load_json","I18n::Backend::Base","I18n/Backend/Base.html#method-i-load_json","(filename)","<p>Loads a JSON translations file. The data must have locales as toplevel keys.\n"],["load_path","I18n::Config","I18n/Config.html#method-i-load_path","()","<p>Allow clients to register paths providing translation data sources. The backend defines acceptable sources. …\n"],["load_path=","I18n::Config","I18n/Config.html#method-i-load_path-3D","(load_path)","<p>Sets the load path instance. Custom implementations are expected to behave like a Ruby Array.\n"],["load_po","I18n::Backend::Gettext","I18n/Backend/Gettext.html#method-i-load_po","(filename)",""],["load_rb","I18n::Backend::Base","I18n/Backend/Base.html#method-i-load_rb","(filename)","<p>Loads a plain Ruby translations file. eval&#39;ing the file must yield a Hash containing translation …\n"],["load_translations","I18n::Backend::Base","I18n/Backend/Base.html#method-i-load_translations","(*filenames)","<p>Accepts a list of paths to translation files. Loads translations from plain Ruby (*.rb), YAML files (*.yml), …\n"],["load_yaml","I18n::Backend::Base","I18n/Backend/Base.html#method-i-load_yaml","(filename)",""],["load_yml","I18n::Backend::Base","I18n/Backend/Base.html#method-i-load_yml","(filename)","<p>Loads a YAML translations file. The data must have locales as toplevel keys.\n"],["locale","I18n::Config","I18n/Config.html#method-i-locale","()","<p>The only configuration value that is not global and scoped to thread is :locale. It defaults to the  …\n"],["locale=","I18n::Config","I18n/Config.html#method-i-locale-3D","(locale)","<p>Sets the current locale pseudo-globally, i.e. in the Thread.current hash.\n"],["locale_available?","I18n::Base","I18n/Base.html#method-i-locale_available-3F","(locale)","<p>Returns true when the passed locale, which can be either a String or a Symbol, is in the list of available …\n"],["localize","I18n::Backend::Base","I18n/Backend/Base.html#method-i-localize","(locale, object, format = :default, options = EMPTY_HASH)","<p>Acts the same as <code>strftime</code>, but uses a localized version of the format string. Takes a key from the date/time …\n"],["localize","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-localize","(locale, object, format = :default, options = EMPTY_HASH)",""],["localize","I18n::Base","I18n/Base.html#method-i-localize","(object, locale: nil, format: nil, **options)","<p>Localizes certain objects, such as dates and numbers to local formatting.\n"],["lookup","I18n::Backend::Base","I18n/Backend/Base.html#method-i-lookup","(locale, key, scope = [], options = EMPTY_HASH)","<p>The method which actually looks up for the translation in the store.\n"],["lookup","I18n::Backend::Cascade","I18n/Backend/Cascade.html#method-i-lookup","(locale, key, scope = [], options = EMPTY_HASH)",""],["lookup","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-lookup","(locale, key, scope = [], options = EMPTY_HASH)",""],["lookup","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-lookup","(locale, key, scope = nil, options = EMPTY_HASH)",""],["lookup","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-lookup","(locale, key, scope = [], options = EMPTY_HASH)","<p>Looks up a translation from the translations hash. Returns nil if either key is nil, or locale, scope …\n"],["map","I18n::Locale::Fallbacks","I18n/Locale/Fallbacks.html#method-i-map","(mappings)",""],["match","I18n::Locale::Tag::Rfc4646::Parser","I18n/Locale/Tag/Rfc4646/Parser.html#method-c-match","(tag)",""],["memoized_lookup","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-memoized_lookup","()",""],["message","I18n::MissingTranslation::Base","I18n/MissingTranslation/Base.html#method-i-message","()",""],["missing_interpolation_argument_handler","I18n::Config","I18n/Config.html#method-i-missing_interpolation_argument_handler","()","<p>Returns the current handler for situations when interpolation argument is missing. MissingInterpolationArgument …\n"],["missing_interpolation_argument_handler=","I18n::Config","I18n/Config.html#method-i-missing_interpolation_argument_handler-3D","(exception_handler)","<p>Sets the missing interpolation argument handler. It can be any object that responds to #call. The arguments …\n"],["missing_key","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-missing_key","(key)",""],["n_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-n_","(msgid, msgid_plural, n = 1)",""],["namespace_lookup?","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-namespace_lookup-3F","(result, options)",""],["new","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-c-new","(*backends)",""],["new","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-c-new","(store, subtrees=true)",""],["new","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-c-new","(master_key, store)",""],["new","I18n::Backend::Transliterator::HashTransliterator","I18n/Backend/Transliterator/HashTransliterator.html#method-c-new","(rule = nil)",""],["new","I18n::Backend::Transliterator::ProcTransliterator","I18n/Backend/Transliterator/ProcTransliterator.html#method-c-new","(rule)",""],["new","I18n::Disabled","I18n/Disabled.html#method-c-new","(method)",""],["new","I18n::InvalidLocale","I18n/InvalidLocale.html#method-c-new","(locale)",""],["new","I18n::InvalidLocaleData","I18n/InvalidLocaleData.html#method-c-new","(filename, exception_message)",""],["new","I18n::InvalidPluralizationData","I18n/InvalidPluralizationData.html#method-c-new","(entry, count, key)",""],["new","I18n::Locale::Fallbacks","I18n/Locale/Fallbacks.html#method-c-new","(*mappings)",""],["new","I18n::Locale::Tag::Simple","I18n/Locale/Tag/Simple.html#method-c-new","(*tag)",""],["new","I18n::Middleware","I18n/Middleware.html#method-c-new","(app)",""],["new","I18n::MissingInterpolationArgument","I18n/MissingInterpolationArgument.html#method-c-new","(key, values, string)",""],["new","I18n::MissingTranslation::Base","I18n/MissingTranslation/Base.html#method-c-new","(locale, key, options = EMPTY_HASH)",""],["new","I18n::ReservedInterpolationKey","I18n/ReservedInterpolationKey.html#method-c-new","(key, string)",""],["new","I18n::UnknownFileType","I18n/UnknownFileType.html#method-c-new","(type, filename)",""],["ngettext","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-ngettext","(msgid, msgid_plural, n = 1)",""],["nil?","I18n::Backend::KeyValue::SubtreeProxy","I18n/Backend/KeyValue/SubtreeProxy.html#method-i-nil-3F","()",""],["nil_key","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-nil_key","(key)",""],["normalize","I18n::Backend::Gettext","I18n/Backend/Gettext.html#method-i-normalize","(locale, data)",""],["normalize_flat_keys","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-i-normalize_flat_keys","(locale, key, scope, separator)","<p>Shortcut to I18n::Backend::Flatten.normalize_flat_keys and then resolve_links.\n"],["normalize_flat_keys","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-c-normalize_flat_keys","(locale, key, scope, separator)","<p>normalize_keys the flatten way. This method is significantly faster and creates way less objects than …\n"],["normalize_key","I18n::Base","I18n/Base.html#method-i-normalize_key","(key, separator)",""],["normalize_keys","I18n::Base","I18n/Base.html#method-i-normalize_keys","(locale, key, scope, separator = nil)","<p>Merges the given locale, key and scope into a single array of keys. Splits keys that contain dots into …\n"],["normalize_pluralization","I18n::Backend::Gettext","I18n/Backend/Gettext.html#method-i-normalize_pluralization","(locale, key, value)",""],["normalized_path","I18n::Backend::CacheFile","I18n/Backend/CacheFile.html#method-i-normalized_path","(file)","<p>Translate absolute filename to relative path for i18n key.\n"],["np_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-np_","(msgctxt, msgid, msgid_plural, n = 1)",""],["npgettext","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-npgettext","(msgctxt, msgid, msgid_plural, n = 1)","<p>Method signatures:\n\n<pre>npgettext(&#39;Fruits&#39;, &#39;apple&#39;, &#39;apples&#39;, 2)\nnpgettext(&#39;Fruits&#39;, [&#39;apple&#39;, &#39;apples&#39;], ...</pre>\n"],["ns_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-ns_","(msgid, msgid_plural, n = 1, separator = '|')",""],["nsgettext","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-nsgettext","(msgid, msgid_plural, n = 1, separator = '|')","<p>Method signatures:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">nsgettext</span>(<span class=\"ruby-string\">&#39;Fruits|apple&#39;</span>, <span class=\"ruby-string\">&#39;apples&#39;</span>, <span class=\"ruby-value\">2</span>)\n<span class=\"ruby-identifier\">nsgettext</span>([<span class=\"ruby-string\">&#39;Fruits|apple&#39;</span>, <span class=\"ruby-string\">&#39;apples&#39;</span>], <span class=\"ruby-value\">2</span>)\n</pre>\n"],["p_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-p_","(msgctxt, msgid)",""],["parent","I18n::Locale::Tag::Parents","I18n/Locale/Tag/Parents.html#method-i-parent","()",""],["parents","I18n::Locale::Tag::Parents","I18n/Locale/Tag/Parents.html#method-i-parents","()",""],["parse","I18n::Backend::Gettext","I18n/Backend/Gettext.html#method-i-parse","(filename)",""],["parser","I18n::Locale::Tag::Rfc4646","I18n/Locale/Tag/Rfc4646.html#method-c-parser","()",""],["parser=","I18n::Locale::Tag::Rfc4646","I18n/Locale/Tag/Rfc4646.html#method-c-parser-3D","(parser)",""],["perform_caching?","I18n","I18n.html#method-c-perform_caching-3F","()",""],["pgettext","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-pgettext","(msgctxt, msgid)",""],["plural_keys","I18n::Gettext","I18n/Gettext.html#method-c-plural_keys","(*args)","<p>returns an array of plural keys for the given locale or the whole hash of locale mappings to plural keys …\n"],["pluralization_key","I18n::Backend::Base","I18n/Backend/Base.html#method-i-pluralization_key","(entry, count)",""],["pluralize","I18n::Backend::Base","I18n/Backend/Base.html#method-i-pluralize","(locale, entry, count)","<p>Picks a translation from a pluralized mnemonic subkey according to English pluralization rules :\n<p>It will …\n"],["pluralize","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-pluralize","(locale, entry, count)",""],["pluralize","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-i-pluralize","(locale, entry, count)",""],["pluralize","I18n::Backend::Pluralization","I18n/Backend/Pluralization.html#method-i-pluralize","(locale, entry, count)","<p>Overwrites the Base backend translate method so that it will check the translation meta data space (:i18n) …\n"],["pluralizer","I18n::Backend::Pluralization","I18n/Backend/Pluralization.html#method-i-pluralizer","(locale)",""],["pluralizers","I18n::Backend::Pluralization","I18n/Backend/Pluralization.html#method-i-pluralizers","()",""],["reload!","I18n::Backend::Base","I18n/Backend/Base.html#method-i-reload-21","()",""],["reload!","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-reload-21","()",""],["reload!","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-reload-21","()",""],["reload!","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-reload-21","()","<p>Clean up translations hash and set initialized to false on reload!\n"],["reload!","I18n::Base","I18n/Base.html#method-i-reload-21","()","<p>Tells the backend to reload translations. Used in situations like the Rails development environment. …\n"],["reserved_key","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-reserved_key","(key)",""],["reset_memoizations!","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-reset_memoizations-21","(locale=nil)",""],["resolve","I18n::Backend::Base","I18n/Backend/Base.html#method-i-resolve","(locale, object, subject, options = EMPTY_HASH)","<p>Resolves a translation. If the given subject is a Symbol, it will be translated with the given options. …\n"],["resolve_link","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-i-resolve_link","(locale, key)",""],["s_","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-s_","(msgid, separator = '|')",""],["self_and_parents","I18n::Locale::Tag::Parents","I18n/Locale/Tag/Parents.html#method-i-self_and_parents","()",""],["set_comment","I18n::Backend::Gettext::PoData","I18n/Backend/Gettext/PoData.html#method-i-set_comment","(msgid_or_sym, comment)",""],["setup","I18n::Tests::Defaults","I18n/Tests/Defaults.html#method-i-setup","()",""],["setup","I18n::Tests::Localization::Date","I18n/Tests/Localization/Date.html#method-i-setup","()",""],["setup","I18n::Tests::Localization::DateTime","I18n/Tests/Localization/DateTime.html#method-i-setup","()",""],["setup","I18n::Tests::Localization::Time","I18n/Tests/Localization/Time.html#method-i-setup","()",""],["setup","I18n::Tests::Lookup","I18n/Tests/Lookup.html#method-i-setup","()",""],["setup_date_translations","I18n::Tests::Localization::Date","I18n/Tests/Localization/Date.html#method-i-setup_date_translations","()",""],["setup_datetime_translations","I18n::Tests::Localization::DateTime","I18n/Tests/Localization/DateTime.html#method-i-setup_datetime_translations","()",""],["setup_time_proc_translations","I18n::Tests::Localization::Procs","I18n/Tests/Localization/Procs.html#method-i-setup_time_proc_translations","()",""],["setup_time_translations","I18n::Tests::Localization::Time","I18n/Tests/Localization/Time.html#method-i-setup_time_translations","()",""],["sgettext","I18n::Gettext::Helpers","I18n/Gettext/Helpers.html#method-i-sgettext","(msgid, separator = '|')",""],["store_link","I18n::Backend::Flatten","I18n/Backend/Flatten.html#method-i-store_link","(locale, key, link)",""],["store_translations","I18n::Backend::Base","I18n/Backend/Base.html#method-i-store_translations","(locale, data, options = EMPTY_HASH)","<p>This method receives a locale, a data hash and options for storing translations. Should be implemented …\n"],["store_translations","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-store_translations","(locale, data, options = EMPTY_HASH)",""],["store_translations","I18n::Backend::InterpolationCompiler","I18n/Backend/InterpolationCompiler.html#method-i-store_translations","(locale, data, options = EMPTY_HASH)",""],["store_translations","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-store_translations","(locale, data, options = EMPTY_HASH)",""],["store_translations","I18n::Backend::Memoize","I18n/Backend/Memoize.html#method-i-store_translations","(locale, data, options = EMPTY_HASH)",""],["store_translations","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-store_translations","(locale, data, options = EMPTY_HASH)","<p>Stores translations for the given locale in memory. This uses a deep merge for the translations hash, …\n"],["subtags","I18n::Locale::Tag::Simple","I18n/Locale/Tag/Simple.html#method-i-subtags","()",""],["subtrees?","I18n::Backend::Base","I18n/Backend/Base.html#method-i-subtrees-3F","()",""],["subtrees?","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-subtrees-3F","()",""],["symbolize_key","I18n::HashRefinements","I18n/HashRefinements.html#method-i-symbolize_key","(key)",""],["t","I18n::Base","I18n/Base.html#method-i-t","(key = nil, *, throw: false, raise: false, locale: nil, **options)",""],["t!","I18n::Base","I18n/Base.html#method-i-t-21","(key, options = EMPTY_HASH)",""],["tag","I18n::Locale::Tag","I18n/Locale/Tag.html#method-c-tag","(tag)","<p>Factory method for locale tags. Delegates to the current locale tag implementation.\n"],["tag","I18n::Locale::Tag::Rfc4646","I18n/Locale/Tag/Rfc4646.html#method-c-tag","(tag)","<p>Parses the given tag and returns a Tag instance if it is valid. Returns false if the given tag is not …\n"],["tag","I18n::Locale::Tag::Simple","I18n/Locale/Tag/Simple.html#method-c-tag","(tag)",""],["teardown","I18n::Tests::Basics","I18n/Tests/Basics.html#method-i-teardown","()",""],["to_a","I18n::Locale::Tag::Rfc4646","I18n/Locale/Tag/Rfc4646.html#method-i-to_a","()",""],["to_a","I18n::Locale::Tag::Simple","I18n/Locale/Tag/Simple.html#method-i-to_a","()",""],["to_exception","I18n::MissingTranslation::Base","I18n/MissingTranslation/Base.html#method-i-to_exception","()",""],["to_s","I18n::Locale::Tag::Rfc4646","I18n/Locale/Tag/Rfc4646.html#method-i-to_s","()",""],["to_s","I18n::Locale::Tag::Simple","I18n/Locale/Tag/Simple.html#method-i-to_s","()",""],["to_s","I18n::MissingTranslation::Base","I18n/MissingTranslation/Base.html#method-i-to_s","()",""],["to_sym","I18n::Locale::Tag::Rfc4646","I18n/Locale/Tag/Rfc4646.html#method-i-to_sym","()",""],["to_sym","I18n::Locale::Tag::Simple","I18n/Locale/Tag/Simple.html#method-i-to_sym","()",""],["tokenize","I18n::Backend::InterpolationCompiler::Compiler","I18n/Backend/InterpolationCompiler/Compiler.html#method-i-tokenize","(str)","<p>tokenize(“foo %{bar} baz %%{buz}”) # =&gt; [“foo ”, “%{bar}”, “ baz …\n"],["translate","I18n::Backend::Base","I18n/Backend/Base.html#method-i-translate","(locale, key, options = EMPTY_HASH)",""],["translate","I18n::Backend::Cache","I18n/Backend/Cache.html#method-i-translate","(locale, key, options = EMPTY_HASH)",""],["translate","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-translate","(locale, key, default_options = EMPTY_HASH)",""],["translate","I18n::Backend::Fallbacks","I18n/Backend/Fallbacks.html#method-i-translate","(locale, key, options = EMPTY_HASH)","<p>Overwrites the Base backend translate method so that it will try each locale given by I18n.fallbacks …\n"],["translate","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-i-translate","(locale, key, options = EMPTY_HASH)",""],["translate","I18n::Base","I18n/Base.html#method-i-translate","(key = nil, *, throw: false, raise: false, locale: nil, **options)","<p>Translates, pluralizes and interpolates a given key using a given locale, scope, and default, as well …\n"],["translate!","I18n::Base","I18n/Base.html#method-i-translate-21","(key, options = EMPTY_HASH)","<p>Wrapper for <code>translate</code> that adds <code>:raise =&gt; true</code>. With this option, if no translation is found, it will …\n"],["translate_localization_format","I18n::Backend::Base","I18n/Backend/Base.html#method-i-translate_localization_format","(locale, object, format, options)",""],["translation_metadata","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-c-translation_metadata","()",""],["translation_metadata=","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-c-translation_metadata-3D","(translation_metadata)",""],["translations","I18n::Backend::Chain::Implementation","I18n/Backend/Chain/Implementation.html#method-i-translations","()",""],["translations","I18n::Backend::KeyValue::Implementation","I18n/Backend/KeyValue/Implementation.html#method-i-translations","()","<p>Queries the translations from the key-value store and converts them into a hash such as the one returned …\n"],["translations","I18n::Backend::Simple::Implementation","I18n/Backend/Simple/Implementation.html#method-i-translations","(do_init: false)",""],["transliterate","I18n::Backend::Transliterator","I18n/Backend/Transliterator.html#method-i-transliterate","(locale, string, replacement = nil)","<p>Given a locale and a UTF-8 string, return the locale&#39;s ASCII approximation for the string.\n"],["transliterate","I18n::Backend::Transliterator::HashTransliterator","I18n/Backend/Transliterator/HashTransliterator.html#method-i-transliterate","(string, replacement = nil)",""],["transliterate","I18n::Backend::Transliterator::ProcTransliterator","I18n/Backend/Transliterator/ProcTransliterator.html#method-i-transliterate","(string, replacement = nil)",""],["transliterate","I18n::Base","I18n/Base.html#method-i-transliterate","(key, *, throw: false, raise: false, locale: nil, replacement: nil, **options)","<p>Transliterates UTF-8 characters to ASCII. By default this method will transliterate only Latin strings …\n"],["with_locale","I18n::Base","I18n/Base.html#method-i-with_locale","(tmp_locale = nil)","<p>Executes block with given I18n.locale set.\n"],["with_metadata","I18n::Backend::Metadata","I18n/Backend/Metadata.html#method-i-with_metadata","(metadata, &block)",""]]}}